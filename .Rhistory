install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
install_from_swirl("R_Programming")
install_course_zip("Desktop/swirl_courses-master.zip", multi=TRUE,
which_course="R_Programming")
install_course_zip("C:\Users\ASUS\Desktop/swirl_courses-master.zip", multi=TRUE,
+                    which_course="R_Programming")
install_course_zip("C:/Users/ASUS/Desktop/swirl_courses-master.zip", multi=TRUE,
+                    which_course="R_Programming")
install_course_zip("~Desktop/swirl_courses-master.zip", multi=TRUE,
+                    which_course="R_Programming")
install_course_zip("~/Desktop/swirl_courses-master.zip", multi=TRUE, which_course="R_Programming")
install_course_zip("~/Desktop/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
install_course("~/Desktop/swirl_courses-master", multi=TRUE, which_course="R_Programming")
install_course_zip("~/Desktop/swirl_courses-master", multi=TRUE, which_course="R_Programming")
swirl()
5+7
bye()
library(swirl)
swirl(())
swirl(0)
sigma <- 10
delta <- 5
zAlpha <- qnorm(0.95)
zBeta <- qnorm(0.20)
(sigma / delta)^2 * (zAlpha - zBeta)^2
effectSize <- 5/sigma
pwr.norm.test(d=effectSize, sig.level=0.05, power=0.80, alternative="greater")
pwr.t.test(d=effectSize, sig.level=0.05, power=0.80, type="one.sample", alternative="greater")
install_course_zip("C:/Users/ASUS/Desktop/swirl_courses-master.zip", multi=TRUE, which_course="Open_Intro")
library(swirl)
swirl()
y <- 100
type(cars)
cars$type
sqrt(y)
z <- sqrt(y)
?sqrt
cars
10
rang(cars$price)
range(cars$price)
sum(cars$price)
sum(cars$price)/36
sum(cars$price)/54
mean(cars$price)
mog.midsize
mpg.midsize
sort(mpg.midsize)
mpg.sorted <- sort(mpg.midsize)
19
median<- mpg.midsize
median(mpg.midsize)
summary(cars$mpgCity)
25
19
18,34
18-34
17
sd(mpg.midsize)
(sd(mpg.midsize))^2
24
install_course_zip("C:/Users/ASUS/Desktop/swirl_courses-master.zip", multi=TRUE, which_course="Regression_Models")
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline<-lm(child~parent, galton)
?abline
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child~parent,galton)
fit<- lm(child~parent, galton); print
play()
fit
fit$residuals
summary(fit)
next()
done()
play()
nxt(0)
nxt()
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols <- (fit$coef[1])
ols <- fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(x)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.intercept))
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,sum(varRes,varEst))
all.equal(varChild,varRes+varEst)
efit <-lm(accel~mag+dist, attenu)
efit
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
head(rownames(available.packages()),3)
install.packages("KernSmooth")
library(KernSmooth)
getwd
getwd()
ls
dir
dir()
randu()
randu
rand
clr
?runif
?round
args(runif)
runif(5,0,10)
args ceiling
args(ceiling)
ceiling(runif(5,0,10))
ceiling(runif(5,0,10))
ceiling(runif(5,0,10))
ordered <- A:X
alphabet
alpha()
alpha
letters
count(letters)
length(letters)
?sample
sample.int(5,10,)
sample(10,5)
sample(letters,26)
sample(letters,26)
replicate(10,sample(letters,10))
rnrorm(1:100)
rnorm*100
?norm
?rnorm
pnorm(100,50)
pnorm(100,mean=50)
rnorm(100,mean=50)
100*rnorm(1,.5)
100*rnorm(100,1)
getwd()
setwd("C:/Users/ASUS/Desktop/Coursera Data Specialization")
ls
dir()
setwd("ProgrammingAssignment2")
dir
dir()
source("cachematrix.R")
?inverse
??inverse
